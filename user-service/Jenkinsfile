pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    SONARQUBE_ENV = 'SonarQube'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Run Tests + Generate Coverage') {
      steps {
        dir('user-service') {
          sh 'mvn clean verify -Deureka.client.enabled=false -Dspring.cloud.config.enabled=false'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv("${SONARQUBE_ENV}") {
          dir('user-service') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=user-service \
                -Dsonar.sources=src/main/java \
                -Dsonar.tests=src/test/java \
                -Dsonar.java.binaries=target/classes \
                -Dsonar.junit.reportPaths=target/surefire-reports \
                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                -Deureka.client.enabled=false \
                -Dspring.cloud.config.enabled=false
            '''
          }
        }
      }
    }

    stage('Dependency Check Analysis') {
      steps {
        dir('user-service') {
          sh 'dependency-check --scan . --project "user-service" --format ALL --out ./dependency-check-report'
          archiveArtifacts artifacts: 'dependency-check-report/*', fingerprint: true
        }
      }
    }

    stage('Trivy Scan') {
      steps {
        dir('user-service') {
           sh 'trivy fs --security-checks vuln . > trivy-vulnerabilities.txt'
           archiveArtifacts artifacts: 'trivy-vulnerabilities.txt', fingerprint: true
        }
      }
    }

  }
}

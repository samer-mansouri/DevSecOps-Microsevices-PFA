pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    SONARQUBE_ENV = 'SonarQube'
    DOCKER_TAG = "${env.GIT_TAG_NAME ?: 'latest'}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Run Tests + Generate Coverage') {
      steps {
        dir('user-service') {
          sh 'mvn clean verify -Deureka.client.enabled=false -Dspring.cloud.config.enabled=false'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv("${SONARQUBE_ENV}") {
          dir('user-service') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=user-service \
                -Dsonar.sources=src/main/java \
                -Dsonar.tests=src/test/java \
                -Dsonar.java.binaries=target/classes \
                -Dsonar.junit.reportPaths=target/surefire-reports \
                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                -Deureka.client.enabled=false \
                -Dspring.cloud.config.enabled=false \
                -Dsonar.qualitygate.wait=true
            '''
          }
        }
      }
    }
    
    stage('Quality Gate Check') {
     steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true  
        }
      }
    }

    // stage('Dependency Check Analysis') {
    //   steps {
    //     dir('user-service') {
    //         // Run OWASP Dependency Check
    //         dependencyCheck odcInstallation: 'DependencyCheck', 
    //             additionalArguments: '--project user-service --format ALL --out ./dependency-check-report .'
            
    //         // Archive the report (optional)
    //         archiveArtifacts artifacts: 'dependency-check-report/*', fingerprint: true
            
    //         // üëá Enhanced Quality Gate with better logging
    //         script {
    //             def reportPath = 'dependency-check-report/dependency-check-report.json'
    //             def report = readJSON file: reportPath
                
    //             // Collect all vulnerabilities with details
    //             def criticalVulns = []
    //             def highVulns = []
                
    //             report.dependencies.each { dep -> 
    //                 dep.vulnerabilities?.each { vul -> 
    //                     def vulnInfo = [
    //                         name: dep.fileName,
    //                         cve: vul.name,
    //                         severity: vul.severity,
    //                         description: vul.description,
    //                         cvssScore: vul.cvssv3?.baseScore ?: vul.cvssv2?.score,
    //                         references: vul.references?.collect { it.url }
    //                     ]
                        
    //                     if (vul.severity == 'CRITICAL') {
    //                         criticalVulns << vulnInfo
    //                     } else if (vul.severity == 'HIGH') {
    //                         highVulns << vulnInfo
    //                     }
    //                 }
    //             }
                
    //             // Log detailed vulnerability information
    //             if (criticalVulns) {
    //                 echo "‚ö†Ô∏è Found ${criticalVulns.size()} CRITICAL vulnerabilities:"
    //                 criticalVulns.eachWithIndex { vuln, i ->
    //                     echo """
    //                     [CRITICAL #${i+1}]
    //                     Dependency: ${vuln.name}
    //                     CVE: ${vuln.cve}
    //                     CVSS Score: ${vuln.cvssScore}
    //                     Description: ${vuln.description?.take(200)}...
    //                     References: ${vuln.references?.take(3)?.join('\n                         ')}
    //                     """
    //                 }
    //             }
                
    //             if (highVulns) {
    //                 echo "‚ö†Ô∏è Found ${highVulns.size()} HIGH vulnerabilities:"
    //                 highVulns.take(5).eachWithIndex { vuln, i ->  // Show first 5 to avoid too much output
    //                     echo """
    //                     [HIGH #${i+1}]
    //                     Dependency: ${vuln.name}
    //                     CVE: ${vuln.cve}
    //                     CVSS Score: ${vuln.cvssScore}
    //                     Description: ${vuln.description?.take(200)}...
    //                     References: ${vuln.references?.take(3)?.join('\n                         ')}
    //                     """
    //                 }
    //                 if (highVulns.size() > 5) {
    //                     echo "... plus ${highVulns.size() - 5} more HIGH vulnerabilities"
    //                 }
    //             }
                
    //             // Fail the build if thresholds are exceeded
    //             if (criticalVulns) {
    //                 error "‚ùå Build failed: ${criticalVulns.size()} CRITICAL vulnerabilities detected! See above for details."
    //             }
    //             if (highVulns.size() > 2) {
    //                 error "‚ùå Build failed: ${highVulns.size()} HIGH vulnerabilities detected (max allowed: 2)! See above for details."
    //             }
                
    //             echo "‚úÖ OWASP Quality Gate passed: ${criticalVulns.size()} Critical, ${highVulns.size()} High vulnerabilities"
    //         }
    //     }
    //   }
    // }

    stage('Trivy FS Scan') {
      steps {
        dir('user-service') {
          sh 'trivy fs --scanners vuln --format table --output trivy-report.txt .'
          archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true
        }
      }
    }

    stage('Docker Build') {
      steps {
        dir('user-service') {
          sh "docker build -t microacrregistry.azurecr.io/user-service:${env.DOCKER_TAG} ."
        }
      }
    }

    stage('Trivy Image Scan') {
      steps {
        dir('user-service') {
          sh 'trivy image --format table --output trivy-image-report.txt microacrregistry.azurecr.io/user-service:latest'
          archiveArtifacts artifacts: 'trivy-image-report.txt', fingerprint: true
        }
      }
    }

    stage('Push Docker Image to ACR') {
      steps {
        dir('user-service') {
          withCredentials([usernamePassword(credentialsId: 'acr-creds', usernameVariable: 'ACR_USER', passwordVariable: 'ACR_PASS')]) {
            sh '''
              echo $ACR_PASS | docker login microacrregistry.azurecr.io -u $ACR_USER --password-stdin
              docker push microacrregistry.azurecr.io/user-service:${DOCKER_TAG}
            '''
          }
        }
      }
    }

    stage('Publish HTML Reports') {
      steps {
        publishHTML([
          reportDir: 'user-service/dependency-check-report',
          reportFiles: 'dependency-check-report.html',
          reportName: 'OWASP Dependency-Check Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])

        publishHTML([
          reportDir: 'user-service',
          reportFiles: 'trivy-report.txt',
          reportName: 'Trivy FS Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])

        publishHTML([
          reportDir: 'user-service',
          reportFiles: 'trivy-image-report.txt',
          reportName: 'Trivy Image Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])
      }
    }
  }

  post {
    success {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \\
          --data '{
            "username": "Jenkins CI",
            "icon_url": "https://raw.githubusercontent.com/jenkinsci/jenkins/master/images/logos/jenkins/jenkins.png",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":white_check_mark: *SUCCESS* ‚Äî *${env.JOB_NAME}* (#${env.BUILD_NUMBER})"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "*Duration:* ${currentBuild.durationString.replace(' and counting', '')}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:* `${env.GIT_BRANCH}`"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Reports:*\\n‚Ä¢ <${env.BUILD_URL}artifact/user-service/dependency-check-report/dependency-check-report.html|OWASP Report>\\n‚Ä¢ <${env.BUILD_URL}artifact/user-service/trivy-report.txt|Trivy FS Report>\\n‚Ä¢ <${env.BUILD_URL}artifact/user-service/trivy-image-report.txt|Trivy Image Report>"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "<${env.BUILD_URL}|View full build logs>"
                  }
                ]
              }
            ]
          }' "$SLACK_URL"
        """
      }
    }

    failure {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \\
          --data '{
            "username": "Jenkins CI",
            "icon_url": "https://raw.githubusercontent.com/jenkinsci/jenkins/master/images/logos/jenkins/jenkins.png",
            "text": ":x: *FAILED* ‚Äî Job: ${env.JOB_NAME} (#${env.BUILD_NUMBER})\\n<${env.BUILD_URL}|View build details>"
          }' "$SLACK_URL"
        """
      }
    }
  }
}

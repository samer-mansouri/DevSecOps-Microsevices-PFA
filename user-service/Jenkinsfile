pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    SONARQUBE_ENV = 'SonarQube'
    JENKINS_URL = 'http://172.189.136.27:8080'
    SONARQUBE_URL = 'http://172.189.136.27:9000'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Run Tests + Generate Coverage') {
      steps {
        dir('user-service') {
          sh 'mvn clean verify -Deureka.client.enabled=false -Dspring.cloud.config.enabled=false'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv("${SONARQUBE_ENV}") {
          dir('user-service') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=user-service \
                -Dsonar.sources=src/main/java \
                -Dsonar.tests=src/test/java \
                -Dsonar.java.binaries=target/classes \
                -Dsonar.junit.reportPaths=target/surefire-reports \
                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                -Deureka.client.enabled=false \
                -Dspring.cloud.config.enabled=false
            '''
          }
        }
      }
    }

    stage('Dependency Check Analysis') {
      steps {
        dir('user-service') {
          dependencyCheck odcInstallation: 'DependencyCheck', additionalArguments: '--project user-service --format ALL --out ./dependency-check-report .'
          archiveArtifacts artifacts: 'dependency-check-report/*', fingerprint: true
        }
      }
    }

    stage('Trivy FS Scan') {
      steps {
        dir('user-service') {
          sh 'trivy fs --scanners vuln --format table --output trivy-report.txt .'
          archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true
        }
      }
    }

    stage('Docker Build') {
      steps {
        dir('user-service') {
          sh 'docker build -t microacrregistry.azurecr.io/user-service:latest .'
        }
      }
    }

    stage('Trivy Image Scan') {
      steps {
        dir('user-service') {
          sh 'trivy image --format table --output trivy-image-report.txt microacrregistry.azurecr.io/user-service:latest'
          archiveArtifacts artifacts: 'trivy-image-report.txt', fingerprint: true
        }
      }
    }

    stage('Push Docker Image to ACR') {
      steps {
        dir('user-service') {
          withCredentials([usernamePassword(credentialsId: 'acr-creds', usernameVariable: 'ACR_USER', passwordVariable: 'ACR_PASS')]) {
            sh '''
              echo $ACR_PASS | docker login microacrregistry.azurecr.io -u $ACR_USER --password-stdin
              docker push microacrregistry.azurecr.io/user-service:latest
            '''
          }
        }
      }
    }

    stage('Publish HTML Reports') {
      steps {
        publishHTML([
          reportDir: 'user-service/dependency-check-report',
          reportFiles: 'dependency-check-report.html',
          reportName: 'OWASP Dependency-Check Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])

        publishHTML([
          reportDir: 'user-service',
          reportFiles: 'trivy-report.txt',
          reportName: 'Trivy FS Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])

        publishHTML([
          reportDir: 'user-service',
          reportFiles: 'trivy-image-report.txt',
          reportName: 'Trivy Image Report',
          keepAll: true,
          allowMissing: true,
          alwaysLinkToLastBuild: true
        ])
      }
    }
  }

  post {
    success {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \\
          --data '{"text": "*‚úÖ Build SUCCESS ‚Äî ${env.JOB_NAME} (#${env.BUILD_NUMBER})*\n\n*Reports:*\n‚Ä¢ SonarQube: ${env.SONARQUBE_URL}/dashboard?id=user-service\n‚Ä¢ Dependency Check: ${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/artifact/user-service/dependency-check-report/dependency-check-report.html\n‚Ä¢ Trivy FS Scan: ${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/artifact/user-service/trivy-report.txt\n‚Ä¢ Trivy Image Scan: ${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/artifact/user-service/trivy-image-report.txt\n\nüîó *Build logs:* ${env.BUILD_URL}"}' \\
          "$SLACK_URL"
        """
      }
    }

    failure {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \\
          --data '{"text": "*‚ùå Build FAILED ‚Äî ${env.JOB_NAME} (#${env.BUILD_NUMBER})*\n\nüîó *Build logs:* ${env.BUILD_URL}"}' \\
          "$SLACK_URL"
        """
      }
    }
  }
}
